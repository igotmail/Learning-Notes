# Lecture 135.1 - Walkthrough of the Higher Lower Game

# The real challenge was the ability to breakdown complex problems and then piece together your own solution

from art import logo, vs
from data_game import data
import random
from replit import clear

def format_data(account):
  """Takes the account data returns a printable format."""
  account_name = account['name']
  account_descr = account['description']
  account_country = account['country']
  return f"{account_name}, a {account_descr}, from {account_country}"

def check_answer(guess, a_followers, b_followers):
  """Use if statement to check if user is correct."""
  if a_followers > b_followers:
    return guess == 'a'
  elif b_followers > a_followers:
    return guess == 'b'
  # Instead of using this, you can simply have the function evaluate whether or not the conditions of a_followers > b_followers and guess == 'a' or 'b' are True or False
  # if a_followers > b_followers:
  #   if guess == 'a':
  #     # increase player score
  #     return "You got it!"
  #   else:
  #     # End the game     
  #     return "You didn't get it."
  # elif b_followers > a_followers:
  #   if guess == 'b':
  #     # increase player score
  #     return "You got it!"
  #   else:
  #     # End the game     
  #     return "You didn't get it." 

# Display Art
print(logo)
score = 0
is_game_finished = False

# Generate a random account from the data list
# print(data[randint(0, len(data) - 1)]['name'])
account_b = random.choice(data)


# Make the game repeatable - We know which part of the program to be repeated based on the requirements of the game.
# New choices will need to be generated repeatedly. The game will need to display those new choices repeatedly. Keep in mind the parts of the program that you want to be repeated and knowing where to place your while loops will be easier
while is_game_finished != True:

  # Making account at position B become the next account at position A
  account_a = account_b
  if account_a == account_b:
    account_b = random.choice(data)

  # Format the account data into a printable format
  # print(f"Compare A: {account_a['name']}, a {account_a['description']}, from {account_a['country']}.")
  print(f"Compare A: {format_data(account_a)}")
  print(vs)
  print(f"Against B: {format_data(account_b)}")
  
  # Ask the user for a guess
  guess = input("Who has more followers? Type 'A' or 'B': ").lower()
  
  # Check if user is correct
  ## Get the follower count of each account
  a_follower_count = account_a['follower_count']
  b_follower_count = account_b['follower_count']
  is_correct = check_answer(guess, a_follower_count, b_follower_count)
  
  # Clear the screen between rounds
  clear()
  print(logo)

  # Give user feedback on their guess
  if is_correct:
    # Score keeping
    score += 1
    print(f"You're right! Current score: {score}")
  else:
    is_game_finished = True
    print(f"Sorry, that's wrong. Final score: {score}")