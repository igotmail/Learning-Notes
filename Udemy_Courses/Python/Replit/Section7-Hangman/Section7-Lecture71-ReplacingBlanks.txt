# Links that helped me formulate answers:
# https://docs.python.org/3/tutorial/datastructures.html
# https://www.geeksforgeeks.org/how-to-replace-values-in-a-list-in-python/

#Step 2

import random
word_list = ["ardvark", "baboon", "camel"]
chosen_word = random.choice(word_list)

#Testing code
print(f'Pssst, the solution is {chosen_word}.')

#TODO-1: - Create an empty List called display.
#For each letter in the chosen_word, add a "_" to 'display'.
#So if the chosen_word was "apple", display should be ["_", "_", "_", "_", "_"] with 5 "_" representing each letter to guess.
display = []
for letter in chosen_word:
  display.append("_")

guess = input("Guess a letter: ").lower()

#TODO-2: - Loop through each position in the chosen_word;
#If the letter at that position matches 'guess' then reveal that letter in the display at that position.
#e.g. If the user guessed "p" and the chosen word was "apple", then display should be ["_", "p", "p", "_", "_"].
for letter in range(len(chosen_word)):
    if chosen_word[letter] == guess:
      display[letter] = guess
     
#TODO-3: - Print 'display' and you should see the guessed letter in the correct position and every other letter replace with "_".
#Hint - Don't worry about getting the user to guess the next letter. We'll tackle that in step 3. 
print(display)

# ============================================================ #

# Previously explored solutions:

# Previous ideas to get the _ in display equal the guessed letter:
# Used the Slicing example from this link: https://www.geeksforgeeks.org/how-to-replace-values-in-a-list-in-python/
# display = display[:chosen_word.index(letter)] + [guess] + display[chosen_word.index(letter) + 1:]
# display[chosen_word.index(letter)] = guess
# display = display[chosen_word.index(letter)]
# display.insert(chosen_word.index(letter), guess)

# So why does the for loop above work only once but not this one?
# for letter in chosen_word:
#   if letter == guess:
#     display[chosen_word.index(letter)] = guess 
      
# I think what's happening is that the index function is retrieving the index position of the first instance of the letter. - Got confirmation from a question I posted on the Udemy that this is the case. The index() function is designed to only find the first instance of an item of an iterable, that's it. 
      
# So, if word = "ardvark", guess = 'a', and letter = 'a' the index function would look for the index of 'a' and find it at index 0 even if it was looking at the 2nd a in "ardvark"
      
# Our code would then change the 0 index of display to 'a' each time letter and guess equaled each other 